name: Build Documentation

on:
  workflow_run:
    workflows: ["Algorithm Analysis"]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write
jobs:
  build:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Set up Python
        id: setup_python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Cache pip
        uses: actions/cache@v3
        id: pip-cache
        with:
          key: ${{ runner.os }}-${{ env.pythonLocation }}-pip-${{ hashFiles('**/requirements.txt') }}
          path: ${{ env.pythonLocation }}
        if: steps.pip-cache.outputs.cache-hit != 'true'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      # Action to download artifacts from a different workflow (analysis.yml)
      - name: 'Download artifact'
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "Figures"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/Figures.zip`, Buffer.from(download.data));

      - name: 'Unzip artifact'
        run: unzip Figures.zip

      - name: Build html
        run: |
          mkdir docs/_static
          ls
          mv *.pdf docs/_static/
          sphinx-apidoc -o docs src
          cd docs/
          make html

      - name: Upload docs artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/_build/html'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
